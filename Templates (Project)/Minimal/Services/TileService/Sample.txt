Services.TileService.PinCommand _pinCommand;
        public Services.TileService.PinCommand PinCommand
        {
            get
            {
                if (_pinCommand != null)
                    return _pinCommand;
                return _pinCommand = new Services.TileService.PinCommand
                {
                    Pin = async () =>
                    {
                        var result = await _TileService.PinAsync(this);
                        if (result)
                            await _ToastService.ShowAsync("Pinned", Value);
                        return result;
                    },
                    Unpin = async () =>
                    {
                        var result = await _TileService.UnPinAsync(this);
                        if (result)
                            await _ToastService.ShowAsync("Unpinned", Value);
                        return result;
                    },
                    IsPinned = async () =>
                    {
                        return await _TileService.IsPinned(this);
                    },
                };
            }
        }

		 <controls:PageHeader Text="Detail Page" Frame="{x:Bind Frame}">
            <AppBarButton Label="{x:Bind ViewModel.PinCommand.Label, Mode=OneWay}"  
                          Command="{x:Bind ViewModel.PinCommand.Command, Mode=OneWay}">
                <AppBarButton.Icon>
                    <FontIcon Glyph="{x:Bind ViewModel.PinCommand.Icon, Mode=OneWay, FallbackValue=&#xE840;}" />
                </AppBarButton.Icon>
            </AppBarButton>
        </controls:PageHeader>