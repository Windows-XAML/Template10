<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>ViewModel class</Title>
      <Author>jerry@nixoncorp.com</Author>
      <Shortcut>T10_ViewModel</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Template10.Mvvm</Namespace>
        </Import>
        <Import>
          <Namespace>Windows.UI</Namespace>
        </Import>
        <Import>
          <Namespace>System.Reflection</Namespace>
        </Import>
        <Import>
          <Namespace>Template10.Utils</Namespace>
        </Import>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
        <Import>
          <Namespace>Windows.UI.Xaml.Navigation</Namespace>
        </Import>
        <Import>
          <Namespace>Template10.Services.NavigationService</Namespace>
        </Import>
      </Imports>
      
      <Declarations>
        <Literal Editable="true">
          <ID>name</ID>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public class $name$ViewModel : Mvvm.ViewModelBase
        {
          public $name$ViewModel() 
          {
              if (Windows.ApplicationModel.DesignMode.DesignModeEnabled)
              {
                  // design-time experience
              }
              else
              {
                  // runtime experience
              }
          }
          
          // sample data
          public IEnumerable<object> Items =>
              typeof(Windows.UI.Colors).GetRuntimeProperties()
                  .Select(x => new { Name = x.Name, Color = (Color)x.GetValue(null) });
         
          public override void OnNavigatedTo(object parameter, NavigationMode mode, IDictionary<string, object> state)
          {
              if (state.Any())
              {
                  // restore state
                  state.Clear();
              }
              else
              {
                  // use parameter
              }
          }

          public override Task OnNavigatedFromAsync(IDictionary<string, object> state, bool suspending)
          {
              if (suspending)
              {
                  // save state
              }
              return Task.CompletedTask;
          }

          public override void OnNavigatingFrom(NavigatingEventArgs args) =>
              args.Cancel = false;
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>